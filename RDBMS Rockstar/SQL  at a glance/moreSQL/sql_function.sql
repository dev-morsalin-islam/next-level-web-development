

-- sql is a declarative language. I don't need to think about how it works

-- in this file we will work with postgresql


-- MAKE  FUNCTION

CREATE OR REPLACE FUNCTION DOUBLE_NUMBER(PARAM_NUMBER INT)
RETURNS INT
LANGUAGE SQL
AS
$$
    SELECT PARAM_NUMBER * 2;
$$;

SELECT DOUBLE_NUMBER(20);


CREATE OR REPLACE FUNCTION SQUARE_NUMBER(PARAM_NUMBER INT)
RETURNS INT 
LANGUAGE SQL
AS  
$$
    SELECT PARAM_NUMBER * PARAM_NUMBER;
$$;


SELECT SQUARE_NUMBER(10);

-- EMPLOYEE_SALARY  FUNCTION



CREATE FUNCTION EMPLOYEE_SALARY()
RETURNS TABLE(EMPLOYEE VARCHAR,SALARY INT)
LANGUAGE SQL
AS 
$$
    SELECT EMPLOYEE_NAME AS EMPLOYEE, SALARY FROM EMPLOYEES;
$$;

SELECT * FROM EMPLOYEE_SALARY();


-- NOTE: IF WE USE LANGUAGE SQL WE CAN'T DEFINE VARIABLE, CAN'T PERFORM LOOP OR ANY COMPLEX LOGIC
-- ######### now lets use plpgsql to get extra facilities ##########


-- define a function which will return double number 

CREATE OR REPLACE FUNCTION DOUBLE_NUMBER2(PARAM_NUMBER INT)
RETURNS INT
LANGUAGE PLPGSQL
AS 
$$
    BEGIN
        RETURN PARAM_NUMBER * 2;
    END
$$;

/*
    NOTE: IF WE WANT TO USE PLPGSQL WE HAVE TO USE RETURN INSTEAD OF SELECT KEYWORD
    AFTER RETURN BLOCK WE  HAVE TO USE SEMI CLONE (;)
*/

-- NOW LETS TRY 

SELECT DOUBLE_NUMBER2(20);


CREATE FUNCTION SQUARE(PARAM INT)
RETURNS INT  
LANGUAGE PLPGSQL 
AS 
$$
    BEGIN
        RETURN PARAM * PARAM;
    END
$$;

SELECT SQUARE(11);

-- now make function which will return multiple row 




SELECT * FROM TEST();

SELECT * FROM EMPLOYEES;

DROP FUNCTION EMPLOYEES_SALARY2;




-- ############## SQL FUNCTION ##########

CREATE TABLE STUDENT(
    NAME VARCHAR(50),
    ID INT UNIQUE NOT NULL
);

INSERT INTO STUDENT(NAME, ID)
    VALUES('MORSALIN ISALAM', 234),
    ('MOTIUR RAHMAN', 235),
    ('HASIB', 2534);

SELECT * FROM STUDENT;
    

-- MAKE TRIPLE NUMBER FUNCTION

CREATE FUNCTION TRIPLE_NUMBER(PARAM INT)
RETURNS INT
LANGUAGE PLPGSQL
AS
$$
    BEGIN
        RETURN PARAM * 3;
    END
$$;

 SELECT TRIPLE_NUMBER(10); -- CALL TRIPLE NUMBER FUNCTION


-- NOW MAKE ANOTHER FUNCTION WHICH WILL RETURN ROW

CREATE OR REPLACE FUNCTION STUDENT_ROLL()
RETURNS TABLE(ID INT)
LANGUAGE PLPGSQL
AS $$
BEGIN
    RETURN QUERY SELECT S.ID FROM STUDENT AS S;
END;
$$;



SELECT ID FROM STUDENT_ROLL();



-- NOW MAKE ANOTHER FUNCTION WHICH WILL RETURN MULTIPLE ROWS

CREATE OR REPLACE FUNCTION STUDENT_INFO()
RETURNS TABLE(NAME VARCHAR, ID INT)
LANGUAGE PLPGSQL
AS
$$
    BEGIN
        RETURN QUERY SELECT S.NAME, S.ID FROM STUDENT AS S;
    END
$$;

SELECT * FROM STUDENT_INFO();


;
CREATE OR REPLACE FUNCTION STUDENT_INFO2()
    RETURNS TABLE(S_NAME VARCHAR, S_ID INT)
    LANGUAGE PLPGSQL
    AS
    $$
        BEGIN
            RETURN QUERY SELECT S.NAME, S.ID FROM STUDENT AS S;
        END
    $$;

SELECT * FROM STUDENT_INFO2();


-- GET SINGLE STUDENT DATA WITH ID

CREATE OR REPLACE FUNCTION SINGLE_STUDENT(PARAM_ID INT)
RETURNS TABLE(NAME VARCHAR, ID INT)
LANGUAGE PLPGSQL
AS
$$
    BEGIN
        RETURN QUERY
            SELECT S.NAME, S.ID FROM STUDENT AS S
                WHERE S.ID = PARAM_ID;
    END
$$;


SELECT * FROM SINGLE_STUDENT(234);