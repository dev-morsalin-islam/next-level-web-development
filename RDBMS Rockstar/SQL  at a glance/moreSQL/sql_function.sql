

-- sql is a declarative language. I don't need to think about how it works

-- in this file we will work with postgresql


-- MAKE  FUNCTION

CREATE OR REPLACE FUNCTION DOUBLE_NUMBER(PARAM_NUMBER INT)
RETURNS INT
LANGUAGE SQL
AS
$$
    SELECT PARAM_NUMBER * 2;
$$;

SELECT DOUBLE_NUMBER(20);


CREATE OR REPLACE FUNCTION SQUARE_NUMBER(PARAM_NUMBER INT)
RETURNS INT 
LANGUAGE SQL
AS  
$$
    SELECT PARAM_NUMBER * PARAM_NUMBER;
$$;


SELECT SQUARE_NUMBER(10);

-- EMPLOYEE_SALARY  FUNCTION



CREATE FUNCTION EMPLOYEE_SALARY()
RETURNS TABLE(EMPLOYEE VARCHAR,SALARY INT)
LANGUAGE SQL
AS 
$$
    SELECT EMPLOYEE_NAME AS EMPLOYEE, SALARY FROM EMPLOYEES;
$$;

SELECT * FROM EMPLOYEE_SALARY();


-- NOTE: IF WE USE LANGUAGE SQL WE CAN'T DEFINE VARIABLE, CAN'T PERFORM LOOP OR ANY COMPLEX LOGIC
-- ######### now lets use plpgsql to get extra facilities ##########


-- define a function which will return double number 

CREATE OR REPLACE FUNCTION DOUBLE_NUMBER2(PARAM_NUMBER INT)
RETURNS INT
LANGUAGE PLPGSQL
AS 
$$
    BEGIN
        RETURN PARAM_NUMBER * 2;
    END
$$;

/*
    NOTE: IF WE WANT TO USE PLPGSQL WE HAVE TO USE RETURN INSTEAD OF SELECT KEYWORD
    AFTER RETURN BLOCK WE  HAVE TO USE SEMI CLONE (;)
*/

-- NOW LETS TRY 

SELECT DOUBLE_NUMBER2(20);


CREATE FUNCTION SQUARE(PARAM INT)
RETURNS INT  
LANGUAGE PLPGSQL 
AS 
$$
    BEGIN
        RETURN PARAM * PARAM;
    END
$$;

SELECT SQUARE(11);

-- now make function which will return multiple row 

DROP FUNCTION EMPLOYEES_SALARY2;

CREATE OR REPLACE FUNCTION EMPLOYEES_SALARY2()
RETURNS TABLE(EMPLOYEE_NAME VARCHAR, SALARY INT)
LANGUAGE plpgsql
AS 
$$
    BEGIN
        RETURN QUERY
        SELECT EMPLOYEE_NAME , SALARY  FROM EMPLOYEES;
        
    END
$$;

-- NOW LETS TEST IT

SELECT * FROM EMPLOYEES_SALARY2();

SELECT * FROM EMPLOYEES;