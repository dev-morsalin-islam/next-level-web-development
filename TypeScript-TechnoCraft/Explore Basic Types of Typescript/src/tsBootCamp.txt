ЁЯУв TypeScript Bootcamp ЁЯза ржорж╛рждрзГ ржнрж╛рж╖рж╛рзЯ рж╢рзЗржЦрзЛ ржЯрж╛ржЗржк-рж╕рзЗржл ржЬрж╛ржнрж╛рж╕рзНржХрзНрж░рж┐ржкрзНржЯ, рждрзИрж░рж┐ ржХрж░рзЛ ржкрзНрж░рзЛржбрж╛ржХрж╢ржи-рж░рзЗржбрж┐ ржХрзЛржб ЁЯФ░ By: Morsalin Islam 

ЁЯФ╢ рзз. ржЯрж╛ржЗржкрж╕рзНржХрзНрж░рж┐ржкрзНржЯ ржХрзА?
TypeScript рж╣рж▓ JavaScript ржПрж░ ржЙржкрж░рзЗрж░ ржПржХржЯрж┐ рж╕рзБржкрж╛рж░рж╕рзЗржЯ, ржпрзЗржЯрж┐ рж╕рзНржЯрзНржпрж╛ржЯрж┐ржХ ржЯрж╛ржЗржкрж┐ржВ рж╕рж╛ржкрзЛрж░рзНржЯ ржХрж░рзЗред ржПрж░ ржорж╛ржзрзНржпржорзЗ рждрзБржорж┐ ржХрзЛржб рж▓рзЗржЦрж╛рж░ рж╕ржоржпрж╝ржЗ ржнрзБрж▓ ржзрж░рждрзЗ ржкрж╛рж░рзЛ, ржлрж▓рзЗ ржмрж╛ржЧ ржХржо рж╣ржпрж╝ ржПржмржВ ржкрзНрж░ржЬрзЗржХрзНржЯ рж╕рзНржХрзЗрж▓ ржХрж░рж╛ржУ рж╕рж╣ржЬ рж╣ржпрж╝ред

ржирж┐ржЪрзЗрж░ ржЙржжрж╛рж╣рж░ржг рж▓ржХрзНрж╖рзНржп ржХрж░рж┐ тмЗя╕П

############### TypeScript ###############

let name: string = "Morsalin";

name = 123; // тЭМ ржнрзБрж▓, ржХрж╛рж░ржг name ржПрж░ ржЯрж╛ржЗржк string

########################################

ЁЯОп JavaScript + Type Safety = TypeScript






ЁЯФ╢ рзи. ржЯрж╛ржЗржкрж╕рзНржХрзНрж░рж┐ржкрзНржЯ ржХрзЗржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржм?
 тЬЕ ржЯрж╛ржЗржк рж╕рзЗржл ржХрзЛржбрж┐ржВ тЬЕ ржХрзЛржб ржЕржЯрзЛ-ржХржоржкрзНрж▓рж┐рж╢ржи ржПржмржВ ржЗржиржЯрзЗрж▓рж┐рж╕рзЗржирзНрж╕

 тЬЕ ржнржмрж┐рж╖рзНржпрждрзЗрж░ JavaScript ржлрж┐ржЪрж╛рж░ ржЖржЧрзЗржнрж╛ржЧрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛рзЯ

 тЬЕ OOP рж╕рж╛ржкрзЛрж░рзНржЯ тЬЕ ржЗржЬрж┐ рж░рж┐ржлрзНржпрж╛ржХрзНржЯрж░рж┐ржВ

 тЬЕ ржмрзЬ ржХрзЛржбржмрзЗрж╕рзЗ рж╕рзНржХрзЗрж▓ ржХрж░рж╛ рж╕рж╣ржЬ тЬЕ ржбрзЗржнрзЗрж▓ржкрж╛рж░ ржПржХрзНрж╕ржкрзЗрж░рж┐ржпрж╝рзЗржирзНрж╕ ржЙржирзНржиржд рж╣ржпрж╝ тЬЕ ржмржбрж╝ ржкрзНрж░ржЬрзЗржХрзНржЯрзЗ ржмрж╛ржЧ рж░рж┐ржбрж╛ржХрж╢ржи

 тЬЕ ржХржорж┐ржЙржирж┐ржЯрж┐ ржПржмржВ ржЯрзБрж▓рж┐ржВ рж╕рж╛ржкрзЛрж░рзНржЯ

___________________________________________________________________

ЁЯФ╢ TypeScript ржбрзЗржЯрж╛ ржЯрж╛ржЗржк:
(i) Primitive Types
string: ржЯрзЗржХрзНрж╕ржЯрзЗрж░ ржЬржирзНржп

number: рж╕ржВржЦрзНржпрж╛ (ржЗржирзНржЯрж┐ржЬрж╛рж░ ржмрж╛ ржлрзНрж▓рзЛржЯ)

boolean: true ржЕржержмрж╛ false

null & undefined: ржХрзЗржмрж▓ржорж╛рждрзНрж░ null ржПржмржВ undefined

symbol: ржЗржЙржирж┐ржХ ржЖржЗржбрзЗржирзНржЯрж┐ржлрж╛рзЯрж╛рж░

(ii) Non-Primitive Types
Array: ржпрзЗржоржи number[] ржмрж╛ string[]

Tuple: ржпрзЗржоржи let user: [string, number] = ["Morsalin", 22];

Object: ржпрзЗржоржи { name: string, age: number }

ЁЯФ╖ рзз. Primitive Types 
тЬЕ (рзз) string
ржмрзНржпржмрж╣рж╛рж░: ржХрзЛржирзЛ ржЯрзЗржХрзНрж╕ржЯ ржмрж╛ рж╕рзНржЯрзНрж░рж┐ржВ ржорж╛ржи ржзрж░рзЗ рж░рж╛ржЦрждрзЗред

ржирж┐ржЪрзЗрж░ code  рж▓ржХрзНрж╖рзНржп ржХрж░рж┐ тмЗя╕П

############### TypeScript ###############

let username: string = "Morsalin";

console.log(username);

########################################

ржмрзНржпрж╛ржЦрзНржпрж╛:

username ржирж╛ржоржХ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ржЯрж┐ рж╢рзБржзрзБржорж╛рждрзНрж░ рж╕рзНржЯрзНрж░рж┐ржВ ржорж╛ржи рж░рж╛ржЦржмрзЗред ржпржжрж┐ ржЖржкржирж┐ ржПрждрзЗ рж╕ржВржЦрзНржпрж╛ ржмрж╛ ржЕржирзНржп ржХрж┐ржЫрзБ рж░рж╛ржЦрзЗржи, TypeScript ржнрзБрж▓ ржжрзЗржЦрж╛ржмрзЗред

тЬЕ (рзи) number
ржмрзНржпржмрж╣рж╛рж░: ржкрзВрж░рзНржгрж╕ржВржЦрзНржпрж╛ ржмрж╛ ржнржЧрзНржирж╛ржВрж╢ рж╕ржВржЦрзНржпрж╛ рж░рж╛ржЦрж╛рж░ ржЬржирзНржпред

ржирж┐ржЪрзЗрж░ code  рж▓ржХрзНрж╖рзНржп ржХрж░рж┐ тмЗя╕П

############### TypeScript ###############

let age: number = 22;

let pi: number = 3.14;
########################################

ржмрзНржпрж╛ржЦрзНржпрж╛: ржПржЦрж╛ржирзЗ age ржПржХржЯрж┐ ржкрзВрж░рзНржгрж╕ржВржЦрзНржпрж╛ ржУ pi ржПржХржЯрж┐ ржнржЧрзНржирж╛ржВрж╢ рж╕ржВржЦрзНржпрж╛, ржжрзБржЯрзЛржЗ number ржЯрж╛ржЗржкрзЗрж░ ржЖржУрждрж╛ржпрж╝ ржкржбрж╝рзЗред

тЬЕ (рзй) boolean
ржмрзНржпржмрж╣рж╛рж░: рж╕рждрзНржп (true) ржЕржержмрж╛ ржорж┐ржерзНржпрж╛ (false) ржорж╛ржи рж░рж╛ржЦрзЗред

ржирж┐ржЪрзЗрж░ code  рж▓ржХрзНрж╖рзНржп ржХрж░рж┐ тмЗя╕П

############### TypeScript ###############

let isLoggedIn: boolean = true;
########################################

ржмрзНржпрж╛ржЦрзНржпрж╛:

ржПржЗ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ржЯрж┐ рж╢рзБржзрзБ true ржмрж╛ false ржорж╛ржи ржЧрзНрж░рж╣ржг ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ, ржЕржирзНржп ржХрж┐ржЫрзБ ржжрж┐рж▓рзЗ TypeScript рждрзНрж░рзБржЯрж┐ ржжрзЗржЦрж╛ржмрзЗред

тЬЕ (рзк) null ржПржмржВ undefined
ржмрзНржпржмрж╣рж╛рж░:

null = ржЗржЪрзНржЫрж╛ржХрзГрждржнрж╛ржмрзЗ ржлрж╛ржБржХрж╛ ржХрж░рзЗ рж░рж╛ржЦрж╛ред

undefined = ржбрзЗржЯрж╛ ржПржЦржирзЛ ржирж┐рж░рзНржзрж╛рж░рж┐ржд рж╣рзЯржирж┐ред

ржирж┐ржЪрзЗрж░ code  рж▓ржХрзНрж╖рзНржп ржХрж░рж┐ тмЗя╕П

############### TypeScript ###############

let data: null = null;

let value: undefined = undefined;
########################################

ржмрзНржпрж╛ржЦрзНржпрж╛:

data ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ржЯрж┐ ржЗржЪрзНржЫрж╛ржХрзГрждржнрж╛ржмрзЗ ржлрж╛ржБржХрж╛ рж░рж╛ржЦрж╛ рж╣ржпрж╝рзЗржЫрзЗред ржЖрж░ value ржПржЦржиржУ ржХрзЛржирзЛ ржорж╛ржи ржкрж╛ржпрж╝ржирж┐ред

тЬЕ (рзл) symbol
ржмрзНржпржмрж╣рж╛рж░: ржЗржЙржирж┐ржХ ржнрзНржпрж╛рж▓рзБ рждрзИрж░рж┐рж░ ржЬржирзНржп, ржЕржирзЗржХржЯрж╛ ржЗржЙржирж┐ржХ ржЖржЗржбрж┐рж░ ржорждрзЛ ржХрж╛ржЬ ржХрж░рзЗред

ржирж┐ржЪрзЗрж░ code  рж▓ржХрзНрж╖рзНржп ржХрж░рж┐ тмЗя╕П

############### TypeScript ###############

let sym1 = Symbol("id");

let sym2 = Symbol("id");

console.log(sym1 === sym2); // false
########################################

ржмрзНржпрж╛ржЦрзНржпрж╛:

ржжрзБ'ржЯрж┐ symbol ржПржХржЗ description ржирж┐рж▓рзЗржУ рждрж╛рж░рж╛ ржЖрж▓рж╛ржжрж╛, ржХрж╛рж░ржг ржкрзНрж░рждрж┐ржЯрж┐ Symbol ржЗржЙржирж┐ржХ рж╣рзЯред

____________________________________________________________________

ЁЯФ╖ рзи. Non-Primitive Types
тЬЕ (рзз) Array
ржмрзНржпржмрж╣рж╛рж░: ржПржХрж╛ржзрж┐ржХ ржПржХржЗ ржЯрж╛ржЗржкрзЗрж░ ржбрзЗржЯрж╛ рж░рж╛ржЦрж╛рж░ ржЬржирзНржпред

ржирж┐ржЪрзЗрж░ code  рж▓ржХрзНрж╖рзНржп ржХрж░рж┐ тмЗя╕П

############### TypeScript ###############

let numbers: number[] = [1, 2, 3, 4]; //syntax -1

let names: Array<string> = ["Morsalin", "Islam"]; // syntax-2
########################################

ржмрзНржпрж╛ржЦрзНржпрж╛:

number[] тЖТ рж╢рзБржзрзБ рж╕ржВржЦрзНржпрж╛ рж░рж╛ржЦржмрзЗ

Array<string> тЖТ рж╢рзБржзрзБ рж╕рзНржЯрзНрж░рж┐ржВ рж░рж╛ржЦржмрзЗ

ржЕржирзНржп ржЯрж╛ржЗржк ржжрж┐рж▓рзЗ TypeScript рждрзНрж░рзБржЯрж┐ ржжрзЗржЦрж╛ржмрзЗ

тЬЕ (рзи) Tuple
ржмрзНржпржмрж╣рж╛рж░: ржлрж┐ржХрзНрж╕ржб ржкржЬрж┐рж╢ржирзЗ ржнрж┐ржирзНржи ржЯрж╛ржЗржкрзЗрж░ ржбрзЗржЯрж╛ рж░рж╛ржЦрж╛рж░ ржЬржирзНржпред

ржирж┐ржЪрзЗрж░ code  рж▓ржХрзНрж╖рзНржп ржХрж░рж┐ тмЗя╕П

############### TypeScript ###############

let user: [string, number] = ["Morsalin", 22];

user[0] = "Rakib";   // тЬЕ ржарж┐ржХ ржЖржЫрзЗ

user[1] = 30;        // тЬЕ ржарж┐ржХ ржЖржЫрзЗ

user[2] = true;      // тЭМ ржнрзБрж▓, ржХрж╛рж░ржг ржорж╛рждрзНрж░ ржжрзБржЗржЯрж╛ ржЖржЗржЯрзЗржо ржЕржирзБржорзЛржжрж┐ржд
########################################

ржмрзНржпрж╛ржЦрзНржпрж╛:

ржкрзНрж░ржержо ржнрзНржпрж╛рж▓рзБ рж╕рзНржЯрзНрж░рж┐ржВ, ржжрзНржмрж┐рждрзАржпрж╝ржЯрж┐ рж╕ржВржЦрзНржпрж╛ред

ржПрж░ ржерзЗржХрзЗ ржмрзЗрж╢рж┐ ржмрж╛ ржХржо ржЖржЗржЯрзЗржо рж░рж╛ржЦрж▓рзЗ ржмрж╛ ржЯрж╛ржЗржк ржкрж╛рж▓рзНржЯрж╛рж▓рзЗ ржнрзБрж▓ ржжрзЗржЦрж╛ржмрзЗред

тЬЕ (рзй) Object
ржмрзНржпржмрж╣рж╛рж░: ржХрж╛рж╕рзНржЯржо рж╕рзНржЯрзНрж░рж╛ржХржЪрж╛рж░ржб ржбрзЗржЯрж╛ рждрзИрж░рж┐ ржХрж░рждрзЗред

ржирж┐ржЪрзЗрж░ code  рж▓ржХрзНрж╖рзНржп ржХрж░рж┐ тмЗя╕П

############### TypeScript ###############

let person: { name: string; age: number } = {

    name: "Morsalin",
  
    age: 21
  
  };
########################################

ржмрзНржпрж╛ржЦрзНржпрж╛:

name рж╣рждрзЗ рж╣ржмрзЗ string

age рж╣рждрзЗ рж╣ржмрзЗ number

ржЖржкржирж┐ ржирж┐рж░рзНржзрж╛рж░рж┐ржд ржЯрж╛ржЗржк ржЫрж╛рзЬрж╛ ржХрж┐ржЫрзБ ржжрж┐рж▓рзЗ TypeScript ржнрзБрж▓ ржзрж░ржмрзЗред

____________________________________________________________________

ржирж┐ржЪрзЗ typescript er ржЖрж░ржУ ржХрж┐ржЫрзБ ржЯрж╛ржЗржк ржжрзЗржЦржмред

ЁЯФ╢ Type Alias
Type Alias ржорж╛ржирзЗ рж╣рж▓рзЛ ржПржХржЯрж┐ ржЯрж╛ржЗржкрзЗрж░ ржЬржирзНржп ржПржХржЯрж┐ ржирж╛ржо (alias) ржжрзЗржУрзЯрж╛ред ржПржЯрж╛ ржЕржирзЗржХржЯрж╛ ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓рзЗрж░ ржорждрзЛ, рждржмрзЗ ржЯрж╛ржЗржкрзЗрж░ ржЬржирзНржпред

тЬЕ Syntax:

type yourOwnDefineType = type

ржирж┐ржЪрзЗрж░ code  рж▓ржХрзНрж╖рзНржп ржХрж░рж┐ тмЗя╕П

############### TypeScript ###############

type UserName = string;

let name: UserName = "Morsalin";
########################################

ржмрзНржпрж╛ржЦрзНржпрж╛: ржПржЦрж╛ржирзЗ UserName рж╣рж▓ string ржЯрж╛ржЗржкрзЗрж░ ржПржХржЯрж┐ alias

############### TypeScript ###############

type User = {

    name: string;
  
    age: number;
  
  };
  
  const user1: User = {
  
    name: "Morsalin",
  
    age: 21,
  
  };
########################################

ржмрзНржпрж╛ржЦрзНржпрж╛: ржПржЦрж╛ржирзЗ User рж╣рж▓ ржПржХржЯрж┐ object ржЯрж╛ржЗржкрзЗрж░ aliasред ржПржЦржи ржЖржкржирж┐ рж╕рж╣ржЬрзЗ ржмрж╛рж░ржмрж╛рж░ ржПржЗ ржЯрж╛ржЗржк ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред

ЁЯФ╢ ржХржЦржи Type Alias ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗржи?
ржпржжрж┐ ржПржХржЗ ржЯрж╛ржЗржк ржмрж╛рж░ржмрж╛рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ рж╣рзЯ

ржпржжрж┐ ржЯрж╛ржЗржк ржмрзЬ рж╣рзЯ ржПржмржВ ржХрзЛржб ржХрзНрж▓рж┐ржи рж░рж╛ржЦрждрзЗ ржЪрж╛ржи

ржпржжрж┐ ржЯрж╛ржЗржкржХрзЗ ржЖрж░ржУ readable ржХрж░рждрзЗ ржЪрж╛ржи

ЁЯФ╖ a. Optional & Literal Types in TypeScript
тЬЕ (рзз) Optional Property

ржмрзНржпржмрж╣рж╛рж░: ржПржХржЯрж┐ ржЕржмржЬрзЗржХрзНржЯрзЗрж░ ржХрзЛржирзЛ ржкрзНрж░ржкрж╛рж░рзНржЯрж┐ ржжрзЗрзЯрж╛ ржмрж╛ржзрзНржпрждрж╛ржорзВрж▓ржХ ржирж╛ рж╣рж▓рзЗред

ржирж┐ржЪрзЗрж░ code  рж▓ржХрзНрж╖рзНржп ржХрж░рж┐ тмЗя╕П

############### TypeScript ###############

let person: { name: string; age: number } = {

    name: "Morsalin",
  
    age: 21
  
  };
########################################

ржмрзНржпрж╛ржЦрзНржпрж╛:

age? ржорж╛ржирзЗ ржПржЗ ржкрзНрж░ржкрж╛рж░рзНржЯрж┐ ржжрзЗржУрзЯрж╛ ржРржЪрзНржЫрж┐ржХред

user1 ржПрж░ age ржирзЗржЗ, рждрж╛ржУ ржарж┐ржХред

user2 ржПрж░ age ржЖржЫрзЗ, ржПржЯрж╛ржУ ржарж┐ржХред

ржкрзНрж░рж╢рзНржиржЪрж┐рж╣рзНржи ? ржжрж┐рзЯрзЗ ржЕржкрж╢ржирж╛рж▓ ржХрж░рж╛ рж╣рзЯред

тЬЕ (рзи) Literal Type
ржмрзНржпржмрж╣рж╛рж░: ржХрзЛржирзЛ ржнрзЗрж░рж┐рзЯрзЗржмрж▓ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржХрж┐ржЫрзБ ржорж╛ржирзЗрж░ ржоржзрзНржпрзЗржЗ рж╕рзАржорж╛ржмржжрзНржз ржерж╛ржХржмрзЗред

ржирж┐ржЪрзЗрж░ code  рж▓ржХрзНрж╖рзНржп ржХрж░рж┐ тмЗя╕П

############### TypeScript ###############

type Direction = "up" | "down" | "left" | "right";

let move: Direction = "up";
########################################

ржмрзНржпрж╛ржЦрзНржпрж╛:

Direction ржЯрж╛ржЗржк ржХрзЗржмрж▓ ржПржЗ ржЪрж╛рж░ржЯрж┐ ржорж╛ржиржЗ ржЧрзНрж░рж╣ржг ржХрж░ржмрзЗред

ржЖржкржирж┐ ржпржжрж┐ рж▓рж┐ржЦрзЗржи move = "north" тЖТ TypeScript ржнрзБрж▓ ржжрзЗржЦрж╛ржмрзЗред

ЁЯФ╖ b. Function Types in TypeScript
тЬЕ (рзз) Function Declaration with Type Annotation

ржирж┐ржЪрзЗрж░ code  рж▓ржХрзНрж╖рзНржп ржХрж░рж┐ тмЗя╕П

############### TypeScript ###############

function add(a: number, b: number): number {

    return a + b;
  
  }
########################################

ржмрзНржпрж╛ржЦрзНржпрж╛:

a ржПржмржВ b ржжрзБржЯрж┐ рж╕ржВржЦрзНржпрж╛ рж╣рждрзЗ рж╣ржмрзЗред

ржлрж╛ржВрж╢ржиржЯрж┐ number рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЗред

тЬЕ (рзи) Arrow Function with Type

############### TypeScript ###############

const greet = (name: string): string => {

    return Hello, ${name};
  
  };
########################################

ржмрзНржпрж╛ржЦрзНржпрж╛:

name рж╣рждрзЗ рж╣ржмрзЗ string

ржЖржЙржЯржкрзБржЯржУ рж╣ржмрзЗ string

__________________________________________________

 ржЪрж▓рзБржи ржПржЦржи ржЖржорж░рж╛ TypeScript-ржПрж░ ржХрзЯрзЗржХржЯрж┐ ржЦрзБржмржЗ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг  ржЬрж┐ржирж┐рж╕ ржЬрзЗржирзЗ ржирзЗржЗред

ЁЯФ╖ рзз. Spread ржПржмржВ Rest Operator
тЬЕ (рзз) Spread Operator (...)
ржмрзНржпржмрж╣рж╛рж░:

ржПржХржЯрж┐ ржЕрзНржпрж╛рж░рзЗ ржмрж╛ ржЕржмржЬрзЗржХрзНржЯрзЗрж░ ржХржирзНржЯрзЗржирзНржЯ ржХржкрж┐ ржХрж░рзЗ ржЕржирзНржпрждрзНрж░ ржЫрзЬрж┐рзЯрзЗ ржжрзЗржУрзЯрж╛ред

ржХрзНрж▓рзЛржи ржмрж╛ ржорж╛рж░рзНржЬ ржХрж░рж╛рж░ ржЬржирзНржп рж╕ржмржЪрзЗрзЯрзЗ ржмрзЗрж╢рж┐ ржмрзНржпржмрж╣рзГржд рж╣рзЯред

ржирж┐ржЪрзЗрж░ code  рж▓ржХрзНрж╖рзНржп ржХрж░рж┐ тмЗя╕П

############### TypeScript ###############

const numbers = [1, 2, 3];

const newNumbers = [...numbers, 4, 5];

console.log(newNumbers); // Output: [1, 2, 3, 4, 5]
########################################

ржмрзНржпрж╛ржЦрзНржпрж╛:

...numbers ржжрж┐рзЯрзЗ ржкрзБрж░ржирзЛ ржЕрзНржпрж╛рж░рзЗ'рж░ рж╕ржм ржнрзНржпрж╛рж▓рзБ ржХржкрж┐ ржХрж░рж╛ рж╣рж▓рзЛ

рждрж╛рж░ржкрж░ ржирждрзБржи ржнрзНржпрж╛рж▓рзБ ржпрзЛржЧ ржХрж░рж╛ рж╣рж▓рзЛ

тЬЕ Object Example:

############### TypeScript ###############

const user = { name: "Morsalin", age: 21 };

const updatedUser = { ...user, role: "admin" };

console.log(updatedUser);

// Output: { name: "Morsalin", age: 21, role: "admin" }
########################################

ржмрзНржпрж╛ржЦрзНржпрж╛:

...user ржжрж┐рзЯрзЗ ржЖржЧрзЗрж░ ржЕржмржЬрзЗржХрзНржЯ ржХржкрж┐ ржХрж░рзЗ ржирждрзБржи ржкрзНрж░ржкрж╛рж░рзНржЯрж┐ ржпрзЛржЧ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ

тЬЕ (рзи) Rest Operator (...)
ржмрзНржпржмрж╣рж╛рж░:

ржЕржирзЗржХржЧрзБрж▓рзЛ ржкрзНржпрж╛рж░рж╛ржорж┐ржЯрж╛рж░ржХрзЗ ржПржХржЯрж┐ ржЕрзНржпрж╛рж░рзЗ-рждрзЗ ржзрж╛рж░ржг ржХрж░рж╛рж░ ржЬржирзНржпред

ржорзВрж▓ржд ржлрж╛ржВрж╢ржи ржкрзНржпрж╛рж░рж╛ржорж┐ржЯрж╛рж░ ржмрж╛ ржбрзЗржЯрж╛ ржбрзЗрж╕ржЯрзНрж░рж╛ржХржЪрж╛рж░рж┐ржВрзЯрзЗ ржмрзНржпржмрж╣рзГржд рж╣рзЯред

тЬЕ Function Example:

тЬЕ Object Example:

############### TypeScript ###############

function sum(...numbers: number[]): number {

    return numbers.reduce((acc, curr) => acc + curr, 0);
  
  }
  
  console.log(sum(1, 2, 3)); // Output: 6
########################################

ржмрзНржпрж╛ржЦрзНржпрж╛:

...numbers рж╕ржм ржЗржиржкрзБржЯ рж╕ржВржЦрзНржпрж╛ ржЕрзНржпрж╛рж░рзЗ рж╣рж┐рж╕рзЗржмрзЗ ржирж┐ржЪрзНржЫрзЗ

ржПрж░ржкрж░ reduce() ржжрж┐рзЯрзЗ ржпрзЛржЧржлрж▓ ржмрзЗрж░ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ

тЬЕ Destructuring with Rest:

############### TypeScript ###############

const [first, second, ...rest] = [10, 20, 30, 40, 50];

console.log(first); // 10

console.log(second); // 20

console.log(rest); // [30, 40, 50]
########################################

ржмрзНржпрж╛ржЦрзНржпрж╛:

ржкрзНрж░ржержо ржжрзБржЗржЯрж┐ ржЖрж▓рж╛ржжрж╛ ржХрж░рзЗ ржирзЗржУрзЯрж╛ рж╣рж▓рзЛ

ржмрж╛ржХрж┐ рж╕ржм rest ржирж╛ржоржХ ржЕрзНржпрж╛рж░рзЗ-рждрзЗ рж░рж╛ржЦрж╛ рж╣рж▓рзЛ

ЁЯФ╖ рзи. Union ржПржмржВ Intersection Types in TypeScript
тЬЕ (рзз) Union Type ( | )
ржмрзНржпржмрж╣рж╛рж░: ржпржЦржи ржХрзЛржирзЛ ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓ ржПржХрж╛ржзрж┐ржХ ржЯрж╛ржЗржкрзЗрж░ ржпрзЗржХрзЛржирзЛ ржПржХржЯрж┐ рж╣рждрзЗ ржкрж╛рж░рзЗ рждржЦржи Union Type ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯред

ржирж┐ржЪрзЗрж░ code  рж▓ржХрзНрж╖рзНржп ржХрж░рж┐ тмЗя╕П

############### TypeScript ###############

let id: number | string;

id = 101;

id = "A101";
########################################

ржмрзНржпрж╛ржЦрзНржпрж╛:

id ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓ржЯрж┐ рж╣рзЯ number ржирж╛ рж╣рзЯ string рж╣рждрзЗ ржкрж╛рж░рзЗред

| ржжрж┐рзЯрзЗ ржПржХрж╛ржзрж┐ржХ ржЯрж╛ржЗржк ржпрзЛржЧ ржХрж░рж╛ рж╣рзЯред

тЬЕ Object ржПрж░ ржоржзрзНржпрзЗ Union:

ржирж┐ржЪрзЗрж░ code  рж▓ржХрзНрж╖рзНржп ржХрж░рж┐ тмЗя╕П

############### TypeScript ###############

type User = {

    name: string;
  
    role: "admin" | "user" | "guest";
  
  };
  
  const user1: User = {
  
    name: "Morsalin",
  
    role: "admin"
  
  };
########################################

ржмрзНржпрж╛ржЦрзНржпрж╛:

role ржХрзЗржмрж▓ рждрж┐ржиржЯрж┐ ржорж╛ржирзЗрж░ ржПржХржЯрж┐ рж╣рждрзЗ ржкрж╛рж░ржмрзЗред

ржПржЯрж┐ржХрзЗ literal union type ржмрж▓рзЗред

######################ржПржЦрзЗржи ржерзЗржХрзЗ рж╕рзБрж░рзБ

тЬЕ (рзи) Intersection Type ( amp; )
ржмрзНржпржмрж╣рж╛рж░: ржпржЦржи ржЖржкржирж┐ ржПржХрж╛ржзрж┐ржХ ржЯрж╛ржЗржкржХрзЗ ржПржХрждрзНрж░рзЗ ржорж┐рж╢рж┐рзЯрзЗ ржПржХржЯрж┐ ржЯрж╛ржЗржк рждрзИрж░рж┐ ржХрж░рждрзЗ ржЪрж╛ржи, рждржЦржи Intersection Type ржмрзНржпржмрж╣рж╛рж░ рж╣рзЯред

ржирж┐ржЪрзЗрж░ code  рж▓ржХрзНрж╖рзНржп ржХрж░рж┐ тмЗя╕П

############### TypeScript ###############

type Person = { name: string };

type Account = { email: string };

type User = Person & Account;

const user: User = {

  name: "Morsalin",

  email: "dev.morsalin@gmail.com"

};
########################################

ржмрзНржпрж╛ржЦрзНржпрж╛:

User ржЯрж╛ржЗржкржЯрж┐ рж╣ржЪрзНржЫрзЗ Person ржПржмржВ AccountтАФржжрзБржЯрзЛрж░ рж╕ржВржорж┐рж╢рзНрж░ржгред

ржпрзЗржХрзЛржирзЛ ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓ ржпржжрж┐ User ржЯрж╛ржЗржк ржкрж╛рзЯ, рждрж╛рж╣рж▓рзЗ name ржПржмржВ emailтАФржжрзБржЗржЯрж╛ржЗ ржерж╛ржХрждрзЗ рж╣ржмрзЗред

ЁЯФ╖ рзй. Optional Chaining (?.) amp; Nullish Coalescing (??) Operator





тЬЕ (рзз) Optional Chaining Operator: ?.
ржмрзНржпржмрж╣рж╛рж░: ржпржЦржи ржЕржмржЬрзЗржХрзНржЯ ржмрж╛ ржПрж░ ржкрзНрж░ржкрж╛рж░рзНржЯрж┐ undefined ржмрж╛ null рж╣рждрзЗ ржкрж╛рж░рзЗ, рждржЦржи рж╕рж░рж╛рж╕рж░рж┐ Access ржирж╛ ржХрж░рзЗ ?. ржжрж┐рзЯрзЗ ржирж┐рж░рж╛ржкржжржнрж╛ржмрзЗ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржХрж░рж╛ ржпрж╛рзЯред

ржирж┐ржЪрзЗрж░ code  рж▓ржХрзНрж╖рзНржп ржХрж░рж┐ тмЗя╕П

############### TypeScript ###############

type User = {

    name: string;
  
    address?: {
  
      city: string;
  
      zip?: number;
  
    };
  
  };
  
  const user: User = {
  
    name: "Morsalin",
  
    address: {
  
      city: "Dhaka"
  
    }
  
  };
  
  console.log(user.address?.city);      // Dhaka
  
  console.log(user.address?.zip);       // undefined
  
  console.log(user.address?.zip?.toFixed?.(2)); // undefined
########################################

ржмрзНржпрж╛ржЦрзНржпрж╛:

user.address?.city ржорж╛ржирзЗ: ржпржжрж┐ address ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ city ржжрзЗржЦрж╛ржУред

ржпржжрж┐ address ржирж╛ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ undefined ржжрж┐ржмрзЗ ржХрж┐ржирзНрждрзБ error ржжрж┐ржмрзЗ ржирж╛ред

тЬЕ (рзи) Nullish Coalescing Operator: ??
ржмрзНржпржмрж╣рж╛рж░: ржХрзЛржирзЛ ржнрзНржпрж╛рж▓рзБ ржпржжрж┐ null ржмрж╛ undefined рж╣рзЯ, рждрж╛рж╣рж▓рзЗ ржбрж┐ржлрж▓рзНржЯ ржнрзНржпрж╛рж▓рзБ ржжрж┐рждрзЗ ?? ржмрзНржпржмрж╣рж╛рж░ рж╣рзЯред

ржирж┐ржЪрзЗрж░ code  рж▓ржХрзНрж╖рзНржп ржХрж░рж┐ тмЗя╕П

############### TypeScript ###############

let input: string | null = null;

let output = input ?? "Default Value";

console.log(output); // Output: "Default Value"
########################################

ржмрзНржпрж╛ржЦрзНржпрж╛:

ржпржжрж┐ input null ржмрж╛ undefined рж╣рзЯ, рждрж╛рж╣рж▓рзЗ "Default Value" ржмрзНржпржмрж╣рзГржд рж╣ржмрзЗред

ржПржЯрж┐ || ржПрж░ ржорждрзЛ рж╣рж▓рзЗржУ ржнрж┐ржирзНржи, ржХрж╛рж░ржг || ржлрж╛рж▓рж╕рж┐ (0, '', false) ржХрзЗ ржУ ржмрж╛ржж ржжрзЗрзЯред

ЁЯФ╣рзк. рждрзБрж▓ржирж╛ ( || vs ?? ):
ржирж┐ржЪрзЗрж░ code  рж▓ржХрзНрж╖рзНржп ржХрж░рж┐ тмЗя╕П

############### TypeScript ###############

let name = "";

// Using ||

console.log(name || "Anonymous"); // Output: "Anonymous"

// Using ??

console.log(name ?? "Anonymous"); // Output: ""
########################################

|| ржлрж╛рж▓рж╕рж┐ ржнрзНржпрж╛рж▓рзБ (empty string) ржХрзЗ ржмрж╛ржж ржжрж┐рзЯрзЗ ржлрзЗрж▓рзЗ

ржХрж┐ржирзНрждрзБ ?? ржХрзЗржмрж▓ null/undefined ржкрзЗрж▓рзЗржЗ ржмрж┐ржХрж▓рзНржк ржнрзНржпрж╛рж▓рзБ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ

ЁЯФ╖ рзл. never ржПржмржВ unknown ржЯрж╛ржЗржк





тЬЕ (рзз) never ржЯрж╛ржЗржк
ржмрзНржпржмрж╣рж╛рж░:

never ржЯрж╛ржЗржк ржПржоржи ржХрзЛржирзЛ ржнрзНржпрж╛рж▓рзБ ржирж┐рж░рзНржжрзЗрж╢ ржХрж░рзЗ ржпрж╛ ржХржЦржиржУ ржкрж╛ржУрзЯрж╛ ржпрж╛ржмрзЗ ржирж╛ред

ржПржЯрж┐ рж╕рж╛ржзрж╛рж░ржгржд ржлрж╛ржВрж╢ржи ржпрзЗржЦрж╛ржирзЗ ржерзНрж░рзЛ ржХрж░рж╛ ржПржХрзНрж╕ржкрзНрж▓рж┐ржкрж╢ржи ржмрж╛ ржЕржирзНрждрж╣рзАржи рж▓рзБржк ржерж╛ржХрзЗ, рж╕рзЗржЦрж╛ржирзЗ ржмрзНржпржмрж╣рзГржд рж╣рзЯред

ржирж┐ржЪрзЗрж░ code  рж▓ржХрзНрж╖рзНржп ржХрж░рж┐ тмЗя╕П

############### TypeScript ###############

function throwError(message: string): never {

    throw new Error(message);
  
  }
  
  function infiniteLoop(): never {
  
    while (true) {}
  
  }
########################################

ржмрзНржпрж╛ржЦрзНржпрж╛:

throwError ржлрж╛ржВрж╢ржиржЯрж┐ ржПржХржЯрж┐ Error ржЫрзБржБрзЬрзЗ ржлрзЗрж▓ржЫрзЗ, ржлрж▓рзЗ ржХржЦржирзЛржЗ рж░рж┐ржЯрж╛рж░рзНржи рж╣ржмрзЗ ржирж╛, рждрж╛ржЗ рждрж╛рж░ ржЯрж╛ржЗржк neverред

infiniteLoop ржПржХржЯрж┐ ржЕржиржирзНржд рж▓рзБржк, ржпрзЗржЦрж╛ржирзЗ ржХржЦржиржУ return рж╣рждрзЗ ржкрж╛рж░рзЗ ржирж╛, рждрж╛ржЗ рждрж╛рж░ ржЯрж╛ржЗржкржУ neverред

тЬЕ (рзи) unknown ржЯрж╛ржЗржк
ржмрзНржпржмрж╣рж╛рж░:

unknown ржЯрж╛ржЗржк рж╣рж▓рзЛ ржирж┐рж░рж╛ржкржж рж╕ржВрж╕рзНржХрж░ржг any ржЯрж╛ржЗржкрзЗрж░, ржпрзЗржЦрж╛ржирзЗ ржХрзЛржи ржнрзНржпрж╛рж▓рзБрж░ ржЯрж╛ржЗржк ржирж┐рж╢рзНржЪрж┐ржд ржирж╛ рж╣рж▓рзЗ рж╕рзЗржЯрж╛ unknown ржжрж┐рзЯрзЗ ржкрзНрж░ржХрж╛рж╢ ржХрж░рж╛ рж╣рзЯред

unknown ржЯрж╛ржЗржкрзЗрж░ рж╕рж╛ржерзЗ ржХрж╛ржЬ ржХрж░рж╛рж░ ржЖржЧрзЗ ржЯрж╛ржЗржк ржЪрзЗржХ ржХрж░рж╛ ржмрж╛ржзрзНржпрждрж╛ржорзВрж▓ржХред

ржирж┐ржЪрзЗрж░ code  рж▓ржХрзНрж╖рзНржп ржХрж░рж┐ тмЗя╕П

############### TypeScript ###############

let value: unknown = "Morsalin";

if (typeof value === "string") {

  console.log(value.toUpperCase());  // MORSALIN

}
########################################

ржмрзНржпрж╛ржЦрзНржпрж╛:

value рж╣рж▓рзЛ unknown ржЯрж╛ржЗржк, ржХрж┐ржирзНрждрзБ ржЖржЧрзЗ ржЯрж╛ржЗржк ржЪрзЗржХ ржХрж░рзЗ рждржмрзЗржЗ ржЖржорж░рж╛ рждрж╛рж░ рж╕рж╛ржерзЗ ржХрж╛ржЬ ржХрж░рзЗржЫрж┐ред

ржПржЯрж╛ ржирж┐рж░рж╛ржкржж, ржХрж╛рж░ржг ржЖржорж░рж╛ ржЯрж╛ржЗржк ржЪрзЗржХ ржЫрж╛рзЬрж╛ рж╕рж░рж╛рж╕рж░рж┐ value ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЛ ржирж╛, ржпрж╛ any-ржП ржХрж░рж╛ ржпрж╛рзЯред

_____________________________________________________________

ЁЯФ╖ рзм. OOP with TypeScript
TypeScript-ржП Object-Oriented Programming (OOP) ржПрж░ ржХржирж╕рзЗржкрзНржЯрж╕ ржпрзЗржоржи: Inheritance, Encapsulation, Polymorphism ржкрзНрж░ржпрж╝рзЛржЧ ржХрж░рж╛ ржпрж╛рзЯ ред






тЬЕ (рзз) Inheritance
ржмрзНржпржмрж╣рж╛рж░: Inheritance-ржПрж░ ржорж╛ржзрзНржпржорзЗ ржПржХржЯрж┐ ржХрзНрж▓рж╛рж╕ ржЕржирзНржп ржХрзНрж▓рж╛рж╕рзЗрж░ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп (properties & methods) ржЧрзНрж░рж╣ржг ржХрж░рждрзЗ ржкрж╛рж░рзЗред

ржпрзЗржоржи ржмрж╛ржк ржжрж╛ржжрж╛рж░ рж╕ржорзНржкрждрзНрждрж┐ ржкрж░ржмрж░рзНрждрзА ржкрзНрж░ржЬржирзНржо ржнрзЛржЧ ржХрж░рждрзЗ ржкрж╛рж░рзЗред

ржирж┐ржЪрзЗрж░ code  рж▓ржХрзНрж╖рзНржп ржХрж░рж┐ тмЗя╕П

############### TypeScript ###############

class Animal {

    name: string;
  
    
  
    constructor(name: string) {
  
      this.name = name;
  
    }
  
    speak(): void {
  
      console.log(`${this.name} makes a sound`);
  
    }
  
  }
  
  class Dog extends Animal {
  
    speak(): void {
  
      console.log(`${this.name} barks`);
  
    }
  
  }
  
  const dog = new Dog("Buddy");
  
  dog.speak(); // Output: Buddy barks
########################################

ржмрзНржпрж╛ржЦрзНржпрж╛:

Dog ржХрзНрж▓рж╛рж╕ Animal ржХрзНрж▓рж╛рж╕ ржерзЗржХрзЗ ржЙрждрзНрждрж░рж╛ржзрж┐ржХрж╛рж░ рж╕рзВрждрзНрж░рзЗ speak ржорзЗржержб ржЧрзНрж░рж╣ржг ржХрж░рзЗржЫрзЗ ржПржмржВ ржПржЯрж┐ржХрзЗ ржХрж╛рж╕рзНржЯржорж╛ржЗржЬржУ ржХрж░рзЗржЫрзЗред

тЬЕ (рзи) Encapsulation 
ржмрзНржпржмрж╣рж╛рж░: Encapsulation рж╣рж▓рзЛ ржбрзЗржЯрж╛ ржПржмржВ ржорзЗржержбржХрзЗ ржПржХрждрзНрж░рзЗ ржПржХржЯрж┐ ржХрзНрж▓рж╛рж╕рзЗрж░ ржоржзрзНржпрзЗ рж░рж╛ржЦрж╛рж░ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ред ржПрж░ ржорж╛ржзрзНржпржорзЗ ржбрзЗржЯрж╛ рж░ржХрзНрж╖рж╛ ржПржмржВ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржХржирзНржЯрзНрж░рзЛрж▓ ржХрж░рж╛ ржпрж╛рзЯред

ржирж┐ржЪрзЗрж░ code  рж▓ржХрзНрж╖рзНржп ржХрж░рж┐ тмЗя╕П

############### TypeScript ###############

class Person {

    private age: number;
  
    constructor(age: number) {
  
      this.age = age;
  
    }
  
    getAge(): number {
  
      return this.age;
  
    }
  
    setAge(age: number): void {
  
      if (age >= 0) {
  
        this.age = age;
  
      }
  
    }
  
  }
  
  const person = new Person(22);
  
  console.log(person.getAge()); // 22
  
  person.setAge(25);
  
  console.log(person.getAge()); // 25
########################################

age ржкрзНрж░ржкрж╛рж░рзНржЯрж┐ private рж╣ржУрзЯрж╛рзЯ рж╕рж░рж╛рж╕рж░рж┐ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржХрж░рж╛ ржпрж╛рзЯ ржирж╛, рж╢рзБржзрзБржорж╛рждрзНрж░ getAge ржУ setAge ржорзЗржержбрзЗрж░ ржорж╛ржзрзНржпржорзЗ ржПрж░ ржорж╛ржи ржкрж░рж┐ржмрж░рзНрждржи ржмрж╛ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯред






тЬЕ (рзй) Polymorphism (ржмрж╣рзБ рж░рзВржк)
ржмрзНржпржмрж╣рж╛рж░: Polymorphism рж╣рж▓рзЛ ржПржХржЗ ржорзЗржержб ржмрж╛ ржкрзНрж░ржкрж╛рж░рзНржЯрж┐ ржмрж┐ржнрж┐ржирзНржи ржХрзНрж▓рж╛рж╕рзЗ ржнрж┐ржирзНржиржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рж╛рж░ ржХрзНрж╖ржорждрж╛ред

ржирж┐ржЪрзЗрж░ code  рж▓ржХрзНрж╖рзНржп ржХрж░рж┐ тмЗя╕П

############### TypeScript ###############

class Animal {

    speak(): void {
  
      console.log("Animal speaks");
  
    }
  
  }
  
  class Dog extends Animal {
  
    speak(): void {
  
      console.log("Dog barks");
  
    }
  
  }
  
  class Cat extends Animal {
  
    speak(): void {
  
      console.log("Cat meows");
  
    }
  
  }
  
  const animals: Animal[] = [new Dog(), new Cat()];
  
  animals.forEach(animal => animal.speak());
  
  // Output: Dog barks
  
  //         Cat meows
########################################

ржмрзНржпрж╛ржЦрзНржпрж╛:

Dog ржУ Cat ржХрзНрж▓рж╛рж╕рзЗ speak ржорзЗржержб ржнрж┐ржирзНржиржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░ржЫрзЗ, рждржмрзЗ ржПржЧрзБрж▓рзЛрж░ ржЯрж╛ржЗржк рж╣ржЪрзНржЫрзЗ Animalред

тЬЕ ржЙржкрж╕ржВрж╣рж╛рж░
ржЯрж╛ржЗржкрж╕рзНржХрзНрж░рж┐ржкрзНржЯ ржжрж┐ржпрж╝рзЗ ржЬрж╛ржнрж╛рж╕рзНржХрзНрж░рж┐ржкрзНржЯ ржХрзЛржб ржЖрж░ржУ рж╕рзБрж░ржХрзНрж╖рж┐ржд, рж░рж┐ржбрзЗржмрж▓ ржПржмржВ рж╕рзНржХрзЗрж▓рзЗржмрж▓ ржХрж░рж╛ ржпрж╛ржпрж╝ред ржкрзНрж░ржЬрзЗржХрзНржЯрзЗ ржмрж╛ржЧ ржХржорж┐ржпрж╝рзЗ ржжржХрзНрж╖рждрж╛ ржмрж╛ржбрж╝рж╛рждрзЗ ржЪрж╛ржЗрж▓рзЗ ржЯрж╛ржЗржкрж╕рзНржХрзНрж░рж┐ржкрзНржЯ ржПржЦржиржХрж╛рж░ ржжрж┐ржирзЗ ржорж╛рж╕рзНржЯ! ЁЯЪА

тЬЕ ржЖрж╢рж╛ ржХрж░рж┐ ржЖржкржирж┐ TypeScript рж╢рж┐ржЦрждрзЗ ржЖрж░рзЛ ржЖржЧрзНрж░рж╣рзА рж╣рзЯрзЗ ржЙржарзЗржЫрзЗржи! ЁЯСЙ ржкрзНрж░рж╢рзНржи ржерж╛ржХрж▓рзЗ ржХржорзЗржирзНржЯ ржХрж░рзЛ ржмрж╛ ржЗржиржмржХрзНрж╕ ржХрж░рзЛред

#TypeScript #Bootcamp #WebDevelopment #Programming #JavaScript #TypeSafety #OOP #CodingJourney #TypeScriptBootcamp #coding